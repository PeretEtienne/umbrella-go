// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums gender.go

package constants

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"strconv"
)

type Gender struct {
	gender
}

type gendersContainer struct {
	GENDERMALE   Gender
	GENDERFEMALE Gender
}

var Genders = gendersContainer{
	GENDERMALE: Gender{
		gender: genderMale,
	},
	GENDERFEMALE: Gender{
		gender: genderFemale,
	},
}

func (c gendersContainer) All() []Gender {
	return []Gender{
		c.GENDERMALE,
		c.GENDERFEMALE,
	}
}

var invalidGender = Gender{}

func ParseGender(a any) (Gender, error) {
	res := invalidGender
	switch v := a.(type) {
	case Gender:
		return v, nil
	case []byte:
		res = stringToGender(string(v))
	case string:
		res = stringToGender(v)
	case fmt.Stringer:
		res = stringToGender(v.String())
	case int:
		res = intToGender(v)
	case int64:
		res = intToGender(int(v))
	case int32:
		res = intToGender(int(v))
	}
	return res, nil
}

func stringToGender(s string) Gender {
	switch s {
	case "genderMale":
		return Genders.GENDERMALE
	case "genderFemale":
		return Genders.GENDERFEMALE
	}
	return invalidGender
}

func intToGender(i int) Gender {
	if i < 0 || i >= len(Genders.All()) {
		return invalidGender
	}
	return Genders.All()[i]
}

func ExhaustiveGenders(f func(Gender)) {
	for _, p := range Genders.All() {
		f(p)
	}
}

var validGenders = map[Gender]bool{
	Genders.GENDERMALE:   true,
	Genders.GENDERFEMALE: true,
}

func (p Gender) IsValid() bool {
	return validGenders[p]
}

func (p Gender) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *Gender) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseGender(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *Gender) Scan(value any) error {
	newp, err := ParseGender(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p Gender) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[genderMale-0]
	_ = x[genderFemale-1]
}

const _genders_name = "genderMalegenderFemale"

var _genders_index = [...]uint16{0, 10, 22}

func (i gender) String() string {
	if i < 0 || i >= gender(len(_genders_index)-1) {
		return "genders(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _genders_name[_genders_index[i]:_genders_index[i+1]]
}
