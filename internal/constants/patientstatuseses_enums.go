// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums patient_statuses.go

package constants

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"strconv"
)

type Patientstatuses struct {
	patientstatuses
}

type patientstatusesesContainer struct {
	PROCESSING  Patientstatuses
	IN_PROGRESS Patientstatuses
	ABORTED     Patientstatuses
	DONE        Patientstatuses
}

var Patientstatuseses = patientstatusesesContainer{
	PROCESSING: Patientstatuses{
		patientstatuses: processing,
	},
	IN_PROGRESS: Patientstatuses{
		patientstatuses: in_progress,
	},
	ABORTED: Patientstatuses{
		patientstatuses: aborted,
	},
	DONE: Patientstatuses{
		patientstatuses: done,
	},
}

func (c patientstatusesesContainer) All() []Patientstatuses {
	return []Patientstatuses{
		c.PROCESSING,
		c.IN_PROGRESS,
		c.ABORTED,
		c.DONE,
	}
}

var invalidPatientstatuses = Patientstatuses{}

func ParsePatientstatuses(a any) (Patientstatuses, error) {
	res := invalidPatientstatuses
	switch v := a.(type) {
	case Patientstatuses:
		return v, nil
	case []byte:
		res = stringToPatientstatuses(string(v))
	case string:
		res = stringToPatientstatuses(v)
	case fmt.Stringer:
		res = stringToPatientstatuses(v.String())
	case int:
		res = intToPatientstatuses(v)
	case int64:
		res = intToPatientstatuses(int(v))
	case int32:
		res = intToPatientstatuses(int(v))
	}
	return res, nil
}

func stringToPatientstatuses(s string) Patientstatuses {
	switch s {
	case "processing":
		return Patientstatuseses.PROCESSING
	case "in_progress":
		return Patientstatuseses.IN_PROGRESS
	case "aborted":
		return Patientstatuseses.ABORTED
	case "done":
		return Patientstatuseses.DONE
	}
	return invalidPatientstatuses
}

func intToPatientstatuses(i int) Patientstatuses {
	if i < 0 || i >= len(Patientstatuseses.All()) {
		return invalidPatientstatuses
	}
	return Patientstatuseses.All()[i]
}

func ExhaustivePatientstatusess(f func(Patientstatuses)) {
	for _, p := range Patientstatuseses.All() {
		f(p)
	}
}

var validPatientstatuseses = map[Patientstatuses]bool{
	Patientstatuseses.PROCESSING:  true,
	Patientstatuseses.IN_PROGRESS: true,
	Patientstatuseses.ABORTED:     true,
	Patientstatuseses.DONE:        true,
}

func (p Patientstatuses) IsValid() bool {
	return validPatientstatuseses[p]
}

func (p Patientstatuses) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *Patientstatuses) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParsePatientstatuses(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *Patientstatuses) Scan(value any) error {
	newp, err := ParsePatientstatuses(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p Patientstatuses) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[processing-0]
	_ = x[in_progress-1]
	_ = x[aborted-2]
	_ = x[done-3]
}

const _patientstatuseses_name = "processingin_progressaborteddone"

var _patientstatuseses_index = [...]uint16{0, 10, 21, 28, 32}

func (i patientstatuses) String() string {
	if i < 0 || i >= patientstatuses(len(_patientstatuseses_index)-1) {
		return "patientstatuseses(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _patientstatuseses_name[_patientstatuseses_index[i]:_patientstatuseses_index[i+1]]
}
